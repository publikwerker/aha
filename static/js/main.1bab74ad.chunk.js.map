{"version":3,"sources":["NewInformation.js","DiligentStudy.js","Learning.js","serviceWorker.js","index.js"],"names":["Confusion","props","react_default","a","createElement","className","onClick","e","Understanding","BetterLife","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mentalState","setState","_this2","bringUnderstanding","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","Learning_BetterLife","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAEe,SAASA,EAAUC,GAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,SAAAC,GAAC,OAAIN,EAAMK,QAAQC,KAApC,MCHS,SAASC,EAAcP,GACpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,0BCAeK,cACnB,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MACH,CACEC,YAAa,aAJDR,oFAShBG,KAAKM,SAAS,CACZD,YAAa,mDAIR,IAAAE,EAAAP,KAEP,MAC0B,cAAzBA,KAAKI,MAAMC,YAERhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACJ,EAAD,CACAM,QAAS,WAAOc,EAAKC,yBAGS,kBAAzBR,KAAKI,MAAMC,YAElBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACI,EAAD,YAHC,SAzB6Bc,IAAMC,WCO1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bab74ad.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Confusion(props) {\n  return (\n    <div className=\"Study\">\n      <button onClick={e => props.onClick(e)}>?</button>\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Understanding(props) {\n  return (\n    <div className=\"Study\">\n      <button>Aha</button>\n    </div>\n  );\n}","import React from 'react';\nimport './Learning.css';\nimport Confusion from './NewInformation';\nimport Understanding from './DiligentStudy';\n\nexport default class BetterLife extends React.Component {\n  constructor(props){\n    super(props);\n    this.state =\n      {\n        mentalState: 'Confusion'\n      }\n  }\n\n  bringUnderstanding() {\n    this.setState({\n      mentalState: 'Understanding'\n    });\n  }\n\n  render() {\n\n    if \n    (this.state.mentalState==='Confusion'){\n      return (\n        <div className=\"Study\">\n          <Confusion \n          onClick={() => {this.bringUnderstanding()}}/>\n        </div>\n      );\n    } else if (this.state.mentalState==='Understanding'){\n      return (\n        <div className=\"Study\">\n          <Understanding />\n        </div>\n      );\n    }\n\n  }\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BetterLife from './Learning';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BetterLife />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}